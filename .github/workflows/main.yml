name: Bump

on:
  workflow_dispatch:
  schedule:
    - cron: "50 1-23/8 * * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/LICENSE"
      - "**/README.md"
      - "**/got_github_release.sh"
  pull_request:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "Bump"
  Bump:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set some variables
        run: |
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "REPO_URL=github.com/${{ github.repository }}" >> $GITHUB_ENV
          echo "checksec_latest_tag_name=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/slimm609/checksec.sh/releases/latest' |
                  grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "bashrc_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/IceCodeNew/myrc/commits?per_page=1&path=.bashrc' |
                  grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "openssl_latest_tag_name=$(curl -sSL \
                  'https://raw.githubusercontent.com/openssl/openssl/OpenSSL_1_1_1-stable/README' |
                  grep -Eo '1.1.1.*')" >> $GITHUB_ENV
          echo "openssl_latest_commit_hash=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/openssl/openssl/commits?per_page=1&sha=OpenSSL_1_1_1-stable' |
                  grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "cmake_latest_tag_name=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/Kitware/CMake/releases/latest' |
                  grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "ninja_latest_tag_name=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/ninja-build/ninja/releases/latest' |
                  grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "netbsd_curses_tag_name=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/sabotage-linux/netbsd-curses/releases/latest' |
                  grep -F 'tag_name' | cut -d'"' -f4 | sed -E 's/^v//')" >> $GITHUB_ENV
          echo "gettext_tiny_tag_name=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/sabotage-linux/gettext-tiny/releases/latest' |
                  grep -F 'tag_name' | cut -d'"' -f4 | sed -E 's/^v//')" >> $GITHUB_ENV
          echo "jemalloc_latest_tag_name=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/jemalloc/jemalloc/releases/latest' |
                  grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "jemalloc_latest_commit_hash=$(curl -sSL -H 'Accept: application/vnd.github.v3+json' \
                  'https://api.github.com/repos/jemalloc/jemalloc/commits?per_page=1' |
                  grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "pcre2_version=$(curl -sSL \
                  "https://ftp.pcre.org/pub/pcre/" | tr -d '\r\n\t' |
                  grep -Po '(?<=pcre2-)[0-9]+\.[0-9]+(?=\.tar\.bz2)' | sort -ru | head -n 1)" >> $GITHUB_ENV
          echo "lua_version=$(curl -sSL \
                  "https://www.lua.org/download.html" | tr -d '\r\n\t' |
                  grep -Po '(?<=lua-)[0-9]\.[0-9]\.[0-9](?=\.tar\.gz)' | sort -ru | head -n 1)" >> $GITHUB_ENV
          echo "libslz_latest_commit_hash=$(curl -sSL \
                  "http://git.1wt.eu/web?p=libslz.git;a=commit;h=refs/heads/master" | tr -d '\r\n\t' |
                  grep -Po '(?<=<td>commit<\/td><td class="sha1">)[a-zA-Z0-9]+(?=<\/td>)')" >> $GITHUB_ENV
          echo "haproxy_branch=2.2" >> $GITHUB_ENV
          echo "haproxy_latest_commit_hash=$(export haproxy_branch=2.2 && curl -sSL \
                  "https://git.haproxy.org/?p=haproxy-${haproxy_branch}.git;a=commit;h=refs/heads/master" | tr -d '\r\n\t' |
                  grep -Po '(?<=<td>commit<\/td><td class="sha1">)[a-zA-Z0-9]+(?=<\/td>)')" >> $GITHUB_ENV
          echo "haproxy_latest_tag_name=$(export haproxy_branch=2.2 && curl -sSL \
                  "https://git.haproxy.org/?p=haproxy-${haproxy_branch}.git;a=tags" | tr -d '\r\n\t' |
                  grep -Po "(?<=a=shortlog;h=refs\/tags\/v)${haproxy_branch}\.[0-9]+" |
                  LC_ALL=C sort -r | head -n 1)" >> $GITHUB_ENV
          echo "cachebust=$(date +%s)" >> $GITHUB_ENV
        shell: bash
      # Runs a set of commands using the runners shell
      - name: Bump
        run: |
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git reset --hard origin/master
          sed -i -E "s/^ARG checksec_latest_tag_name=.+/ARG checksec_latest_tag_name=${checksec_latest_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG bashrc_latest_commit_hash=.+/ARG bashrc_latest_commit_hash=${bashrc_latest_commit_hash:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG pcre2_version=.+/ARG pcre2_version=${pcre2_version:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG openssl_latest_tag_name=.+/ARG openssl_latest_tag_name=${openssl_latest_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG openssl_latest_commit_hash=.+/ARG openssl_latest_commit_hash=${openssl_latest_commit_hash:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG cmake_latest_tag_name=.+/ARG cmake_latest_tag_name=${cmake_latest_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG ninja_latest_tag_name=.+/ARG ninja_latest_tag_name=${ninja_latest_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG netbsd_curses_tag_name=.+/ARG netbsd_curses_tag_name=${netbsd_curses_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG gettext_tiny_tag_name=.+/ARG gettext_tiny_tag_name=${gettext_tiny_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG jemalloc_latest_tag_name=.+/ARG jemalloc_latest_tag_name=${jemalloc_latest_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG jemalloc_latest_commit_hash=.+/ARG jemalloc_latest_commit_hash=${jemalloc_latest_commit_hash:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG haproxy_branch=.+/ARG haproxy_branch=${haproxy_branch:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile release_haproxy_alpine.Dockerfile release_haproxy_debian.Dockerfile
          sed -i -E "s/^ARG haproxy_latest_commit_hash=.+/ARG haproxy_latest_commit_hash=${haproxy_latest_commit_hash:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile release_haproxy_alpine.Dockerfile release_haproxy_debian.Dockerfile
          sed -i -E "s/^ARG haproxy_latest_tag_name=.+/ARG haproxy_latest_tag_name=${haproxy_latest_tag_name:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile release_haproxy_alpine.Dockerfile release_haproxy_debian.Dockerfile
          sed -i -E "s/^ARG lua_version=.+/ARG lua_version=${lua_version:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG libslz_latest_commit_hash=.+/ARG libslz_latest_commit_hash=${libslz_latest_commit_hash:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          sed -i -E "s/^ARG cachebust=.+/ARG cachebust=${cachebust:?empty value}/" haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile
          git add haproxy_alpine_builder.Dockerfile haproxy_debian_builder.Dockerfile release_haproxy_alpine.Dockerfile release_haproxy_debian.Dockerfile
          git commit -m "Bump"
          git push -u origin master
      - name: Force push `release` branch
        run: |
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git checkout release
          git reset --hard origin/master
          git rm got_github_release.sh
          git rm README.md
          git rm release_haproxy_alpine.Dockerfile
          git rm release_haproxy_debian.Dockerfile
          git rm -r .github
          git commit -m "${{ env.RELEASE_NAME }}"
          git push -f -u origin release
